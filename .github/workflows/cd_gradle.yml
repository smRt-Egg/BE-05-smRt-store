name: Java CD with Gradle in smRt store

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  checks: write
  pull-requests: write

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      ## Gradle Wrapper 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      ##gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## create application.yml
      - name: make application.yml
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.yml
        shell: bash
      - name: deliver application.yml
        run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.yml
        shell: bash

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # push 하기 위해 로그인
      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_ID }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker image 빌드하고 push하기
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKER_ID }}/smrt_store:latest

      #docker 파일을 ec2 서버에 배포
      - name: Deploy to Prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PEM_KEY }}
          port: 22
          script: |
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            docker pull ${{ secrets.DOCKER_ID }}/smrt_store
            docker run -d --log-driver=awslogs --log-opt awslogs-region=ap-northeast-2 --log-opt awslogs-group=web --log-opt awslogs-stream=log --name smrt_store -p 8080:8080 -e TZ=Asia/Seoul ${{ secrets.DOCKER_ID }}/smrt_store
            docker system prune -f
